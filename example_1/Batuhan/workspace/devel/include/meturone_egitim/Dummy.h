// Generated by gencpp from file meturone_egitim/Dummy.msg
// DO NOT EDIT!


#ifndef METURONE_EGITIM_MESSAGE_DUMMY_H
#define METURONE_EGITIM_MESSAGE_DUMMY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace meturone_egitim
{
template <class ContainerAllocator>
struct Dummy_
{
  typedef Dummy_<ContainerAllocator> Type;

  Dummy_()
    : n(0)
    , arr()  {
    }
  Dummy_(const ContainerAllocator& _alloc)
    : n(0)
    , arr(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _n_type;
  _n_type n;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _arr_type;
  _arr_type arr;





  typedef boost::shared_ptr< ::meturone_egitim::Dummy_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::meturone_egitim::Dummy_<ContainerAllocator> const> ConstPtr;

}; // struct Dummy_

typedef ::meturone_egitim::Dummy_<std::allocator<void> > Dummy;

typedef boost::shared_ptr< ::meturone_egitim::Dummy > DummyPtr;
typedef boost::shared_ptr< ::meturone_egitim::Dummy const> DummyConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::meturone_egitim::Dummy_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::meturone_egitim::Dummy_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::meturone_egitim::Dummy_<ContainerAllocator1> & lhs, const ::meturone_egitim::Dummy_<ContainerAllocator2> & rhs)
{
  return lhs.n == rhs.n &&
    lhs.arr == rhs.arr;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::meturone_egitim::Dummy_<ContainerAllocator1> & lhs, const ::meturone_egitim::Dummy_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace meturone_egitim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::meturone_egitim::Dummy_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::meturone_egitim::Dummy_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::meturone_egitim::Dummy_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::meturone_egitim::Dummy_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::meturone_egitim::Dummy_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::meturone_egitim::Dummy_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::meturone_egitim::Dummy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a28c53ac425b05d14c304bbe6886d48e";
  }

  static const char* value(const ::meturone_egitim::Dummy_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa28c53ac425b05d1ULL;
  static const uint64_t static_value2 = 0x4c304bbe6886d48eULL;
};

template<class ContainerAllocator>
struct DataType< ::meturone_egitim::Dummy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "meturone_egitim/Dummy";
  }

  static const char* value(const ::meturone_egitim::Dummy_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::meturone_egitim::Dummy_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 n\n"
"int32[] arr\n"
;
  }

  static const char* value(const ::meturone_egitim::Dummy_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::meturone_egitim::Dummy_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.n);
      stream.next(m.arr);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Dummy_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::meturone_egitim::Dummy_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::meturone_egitim::Dummy_<ContainerAllocator>& v)
  {
    s << indent << "n: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.n);
    s << indent << "arr[]" << std::endl;
    for (size_t i = 0; i < v.arr.size(); ++i)
    {
      s << indent << "  arr[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.arr[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // METURONE_EGITIM_MESSAGE_DUMMY_H
